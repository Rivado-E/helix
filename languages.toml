[language-server]
clangd = { command = "clangd" }
nil = { command = "nil" }
nixd = { command = "nixd" }
pylsp = { command = "pylsp" }

[[language]]
name = "c"
scope = "source.c"
injection-regex = "c"
file-types = ["c"] # TODO: ["h"]
comment-token = "//"
block-comment-tokens = { start = "/*", end = "*/" }
language-servers = [ "clangd" ]
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "cpp"
scope = "source.cpp"
injection-regex = "cpp"
file-types = ["cc", "hh", "c++", "cpp", "hpp", "h", "ipp", "tpp", "cxx", "hxx", "ixx", "txx", "ino", "C", "H", "cu", "cuh", "cppm", "h++", "ii", "inl", { glob = ".hpp.in" }, { glob = ".h.in" }]
comment-token = "//"
block-comment-tokens = { start = "/*", end = "*/" }
language-servers = [ "clangd" ]
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "nix"
scope = "source.nix"
injection-regex = "nix"
file-types = ["nix"]
shebangs = []
comment-token = "#"
language-servers = [ "nil", "nixd" ]
indent = { tab-width = 2, unit = "  " }

# [[language]]
# name="cpp"
# formatter = { command = "clang-format"}
#  indent = { tab-width = 4, unit = " " }
# auto-format = true


[[language]]
name = "python"
scope = "source.python"
injection-regex = "py(thon)?"
file-types = ["py", "pyi", "py3", "pyw", "ptl", "rpy", "cpy", "ipy", "pyt", { glob = ".python_history" }, { glob = ".pythonstartup" }, { glob = ".pythonrc" }, { glob = "SConstruct" }, { glob = "SConscript" }]
shebangs = ["python"]
roots = ["pyproject.toml", "setup.py", "poetry.lock", "pyrightconfig.json"]
comment-token = "#"
language-servers = ["ruff", "jedi", "pylsp"]
# TODO: pyls needs utf-8 offsets
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "ocaml"
 language-servers = ["ocamllsp", "ocamlformat"]
formatter = { command = "ocamlformat", args = [
  "-",
  "--impl",
] }
 indent = { tab-width = 2, unit = " " }
 auto-format = true


 [[language]]
 name = "typescript"
 language-servers = [  "typescript-language-server", "tailwindcss-react", "eslint", "emmet-ls", "snippets-ls", "graphql"]
 formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
 indent = { tab-width = 4, unit = "\t" }
 auto-format = true

 [[language]]
 name = "tsx"
 language-servers = [ "typescript-language-server", "tailwindcss-react", "eslint", "emmet-ls", "snippets-ls", "graphql"]
 formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
 indent = { tab-width = 4, unit = "\t" }
 auto-format = true

 [[language]]
 name = "jsx"
 language-servers = [ "typescript-language-server", "tailwindcss-react", "eslint", "emmet-ls","snippets-ls", "graphql"]
 grammar = "javascript"
 formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
 indent = { tab-width = 2, unit = " " }
 auto-format = true

 [[language]]
 name = "javascript"
 language-servers = [ "typescript-language-server", "tailwindcss-react", "eslint", "emmet-ls", "snippets-ls", "graphql"]
 formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
 indent = { tab-width = 2, unit = " " }
 auto-format = true

 [[language]]
 name = "json"
 language-servers = [ "vscode-json-language-server" ]
 formatter = { command = 'npx', args = ["prettier", "--parser", "json"] }
 indent = { tab-width = 2, unit = " " }
 auto-format = true

 [[language]]
 name = "lua"
 indent = { tab-width = 2, unit = " " }
 auto-format = true

 [language-server.vscode-json-language-server.config]
 json = { validate = { enable = true }, format = { enable = true } }
 provideFormatter = true

 [language-server.vscode-css-language-server.config]
 css = { validate = { enable = true } }
 scss = { validate = { enable = true } }
 less = { validate = { enable = true } }
 provideFormatter = true

 [[language]]
 name = "html"
 formatter = { command = 'npx', args = ["prettier", "--parser", "html"] }
 language-servers = [ "vscode-html-language-server", "tailwindcss-react", "emmet-ls"]
 
 [[language]]
 name = "css"
 formatter = { command = 'npx', args = ["prettier", "--parser", "css"] }
 language-servers = [ "vscode-css-language-server", "tailwindcss-react", "emmet-ls"]

 [language-server.emmet-ls]
 args = ["--stdio"]
 command = "emmet-language-server"

 [language-server.eslint]
 args = ["--stdio"]
 command = "vscode-eslint-language-server"

 [language-server.eslint.config]
 format = true
 nodePath = ""
 onIgnoredFiles = "off"
 packageManager = "npm"
 quiet = false
 rulesCustomizations = []
 run = "onType"
 useESLintClass = false
 validate = "on"
 codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = true } }
 codeActionOnSave = { mode = "all" }
 experimental = { }
 problems = { shortenToSingleLine = false }
 workingDirectory = { mode = "auto" }

 [language-server.tailwindcss-vue]
 command = "tailwindcss-language-server"
 args = ["--stdio"]
 config = {}

 [language-server.tailwindcss-react]
 language-id = "typescriptreact"
 command = "tailwindcss-language-server"
 args = ["--stdio"]
 config = {}

 [language-server.snippets-ls]
 language-id = "typescriptreact"
 command = "snippets-ls"
 args = ["-config", "/Users/noel/.config/helix/snippets.json"]

 [language-server.typescript-language-server.config]
 documentFormatting = false
 hostInfo = "helix"

 [language-server.typescript-language-server.config.typescript.inlayHints]
 includeInlayEnumMemberValueHints = true
 includeInlayFunctionLikeReturnTypeHints = true
 includeInlayFunctionParameterTypeHints = true
 includeInlayParameterNameHints = "all"
 includeInlayParameterNameHintsWhenArgumentMatchesName = true
 includeInlayPropertyDeclarationTypeHints = true
 includeInlayVariableTypeHints = true

 [language-server.typescript-language-server.config.completions]
 completeFunctionCalls = true

 [language-server.typescript-language-server.config.javascript.inlayHints]
 includeInlayEnumMemberValueHints = true
 includeInlayFunctionLikeReturnTypeHints = true
 includeInlayFunctionParameterTypeHints = true
 includeInlayParameterNameHints = "all"
 includeInlayParameterNameHintsWhenArgumentMatchesName = true
 includeInlayPropertyDeclarationTypeHints = true
 includeInlayVariableTypeHints = true
